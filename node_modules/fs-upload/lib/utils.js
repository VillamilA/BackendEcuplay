"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; /**
                                                                                                                                                                                                                                                                               * Created by guowei on 17/3/31.
                                                                                                                                                                                                                                                                               */


var _bluebird = require("bluebird");

var _bluebird2 = _interopRequireDefault(_bluebird);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var filesToDataURL = function filesToDataURL(files) {
    if ((typeof files === "undefined" ? "undefined" : _typeof(files)) != "object") {
        return false;
    }
    if (files instanceof Array) {
        return new _bluebird2["default"](function (resolve, reject) {
            var dataURL = [];
            var i = 0;
            var handle = function handle() {
                if (files.length == i) {
                    resolve(dataURL);
                    return false;
                }
                var file = files[i];
                fileToDataURL(file).then(function (res) {
                    dataURL.push(res);
                    i++;
                    handle();
                });
            };
            handle();
        });
    } else {
        return fileToDataURL(files);
    }
};
var fileToDataURL = function fileToDataURL(file) {
    return new _bluebird2["default"](function (resolve, reject) {
        var a = new FileReader();
        a.onload = function (e) {
            resolve(e.target.result);
        };
        a.readAsDataURL(file);
    });
};
var canvasCompress = function canvasCompress(file, ratio) {
    return new _bluebird2["default"](function (resolve, reject) {
        fileToDataURL(file).then(function (res) {
            var canvas = document.createElement("canvas");
            var ctx = canvas.getContext("2d");
            var img = new Image();
            img.onload = function () {
                canvas.width = img.width;
                canvas.height = img.height;
                ctx.fillStyle = "#fff";
                ctx.fillRect(0, 0, canvas.width, canvas.height);
                ctx.drawImage(img, 0, 0);
                var dataURL = canvas.toDataURL('image/jpeg', ratio);
                var blob = dataURLtoBlob(dataURL);
                if (file.size < blob.size) {
                    resolve(file);
                } else {
                    resolve(blob);
                }
            };
            img.src = res;
        });
    });
};
var compressImage = function compressImage(files) {
    var ratio = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.9;

    if ((typeof files === "undefined" ? "undefined" : _typeof(files)) != "object") {
        return false;
    }
    if (files instanceof Array) {
        return new _bluebird2["default"](function (resolve, reject) {
            var blobs = [];
            var i = 0;
            var handle = function handle() {
                if (files.length == i) {
                    resolve(blobs);
                    return false;
                }
                var file = files[i];
                canvasCompress(file, ratio).then(function (blob) {
                    blobs.push(blob);
                    i++;
                    handle();
                });
            };
            handle();
        });
    } else {
        return canvasCompress(files, ratio);
    }
};
var dataURLtoBlob = function dataURLtoBlob(dataurl) {
    var arr = dataurl.split(','),
        mime = arr[0].match(/:(.*?);/)[1],
        bstr = atob(arr[1]),
        n = bstr.length,
        u8arr = new Uint8Array(n);
    while (n--) {
        u8arr[n] = bstr.charCodeAt(n);
    }
    return new Blob([u8arr], { type: mime });
};
//const dataURLToCanvas = (dataURL)=> {
//    return new Promise((resolve, reject)=> {
//
//    });
//};
exports["default"] = { filesToDataURL: filesToDataURL, compressImage: compressImage };
module.exports = exports['default'];