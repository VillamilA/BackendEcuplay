'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _utils = require('./utils');

var _utils2 = _interopRequireDefault(_utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created by guowei on 17/3/31.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


var Upload = function (_Component) {
    _inherits(Upload, _Component);

    function Upload() {
        _classCallCheck(this, Upload);

        return _possibleConstructorReturn(this, _Component.apply(this, arguments));
    }

    Upload.prototype.componentDidMount = function componentDidMount() {
        var _this2 = this;

        var _props = this.props,
            paste = _props.paste,
            drop = _props.drop,
            domain = _props.domain;

        var dom = null;
        if (domain == 'document') {
            dom = document;
        } else {
            dom = this.refs.self;
        }

        if (drop) {
            this.stopBrowserAction = function (e) {
                e.stopPropagation();
                e.preventDefault();
            };
            //阻止浏览器默行为。
            document.addEventListener('dragover', this.stopBrowserAction);
            document.addEventListener('drop', this.stopBrowserAction);
            this.dropEvent = function (e) {
                e.stopPropagation();
                e.preventDefault();
                _this2.drop(e);
            };
            //添加拖拽事件
            dom.addEventListener('drop', this.dropEvent);
        }
        if (paste) {
            this.pasteEvent = function (e) {
                _this2.paste(e);
            };
            dom.addEventListener('paste', this.pasteEvent);
        }
    };

    //组件移除前调用。


    Upload.prototype.componentWillUnmount = function componentWillUnmount() {
        var _props2 = this.props,
            paste = _props2.paste,
            drop = _props2.drop,
            domain = _props2.domain;

        var dom = null;
        if (domain == 'document') {
            dom = document;
        } else {
            dom = this.refs.self;
        }
        document.removeEventListener('dragover', this.stopBrowserAction);
        document.removeEventListener('drop', this.stopBrowserAction);
        dom.removeEventListener('drop', this.dropEvent);
        dom.removeEventListener('paste', this.pasteEvent);
    };

    //过滤


    Upload.prototype.filter = function filter(file) {
        var _props3 = this.props,
            allow = _props3.allow,
            onError = _props3.onError;
        //if (!/image\/\w+/.test(file.type)) {
        //    console.log('文件必须为图片！');
        //    return false;
        //}

        var index = file.name.indexOf('.');
        if (index < 0) {
            console.log('文件后缀是不允许的!');
            onError("文件后缀是不允许的!");
            return false;
        }
        var ext = file.name.substr(index + 1).toLowerCase();
        var reg = new RegExp('(.*)(' + allow + ')+(.*)');
        if (!reg.test(ext)) {
            console.log('文件后缀是不允许的!');
            onError("文件后缀是不允许的!");
            return false;
        }
        return true;
    };

    //拖拽


    Upload.prototype.drop = function drop(e) {
        var fileList = event.dataTransfer.files;
        if (!fileList || !fileList.length) return;
        var files = [];
        for (var i = 0, item; item = fileList[i]; i++) {
            if (this.filter(item)) {
                files.push(item);
            }
        }
        var _props4 = this.props,
            onChange = _props4.onChange,
            onError = _props4.onError;

        if (files.length == 0) {
            onError('文件类型错误!');
            return false;
        }
        onChange(files);
    };

    //粘贴


    Upload.prototype.paste = function paste(e) {
        if (e.clipboardData && e.clipboardData.items && e.clipboardData.items.length) {
            var files = [];
            for (var i = 0, item; item = e.clipboardData.items[i]; i++) {
                if (this.filter(item)) {
                    files.push(item.getAsFile());
                }
            }
            var _props5 = this.props,
                onChange = _props5.onChange,
                onError = _props5.onError;

            if (files.length == 0) {
                onError('文件类型错误!');
                return false;
            }
            //console.log(files);
            onChange(files);
        }
    };

    Upload.prototype.onClick = function onClick() {
        this.refs.inputFile.click();
    };

    Upload.prototype.onInputChange = function onInputChange(e) {
        var file = e.target.files[0];
        if (file == null) {
            return false;
        }
        var files = [];
        if (this.filter(file)) {
            files.push(file);
        }
        var _props6 = this.props,
            onChange = _props6.onChange,
            onError = _props6.onError;

        if (files.length <= 0) {
            onError('文件类型错误!');
            return false;
        }
        this.refs.inputFile.value = '';
        onChange(files);
    };

    Upload.prototype.render = function render() {
        var _props7 = this.props,
            children = _props7.children,
            onClick = _props7.onClick,
            paste = _props7.paste,
            drop = _props7.drop,
            domain = _props7.domain,
            allow = _props7.allow,
            onError = _props7.onError,
            onChange = _props7.onChange,
            other = _objectWithoutProperties(_props7, ['children', 'onClick', 'paste', 'drop', 'domain', 'allow', 'onError', 'onChange']);

        return _react2["default"].createElement(
            'div',
            _extends({}, other, { onClick: this.onClick.bind(this), ref: 'self' }),
            _react2["default"].createElement('input', { onChange: this.onInputChange.bind(this), type: 'file', ref: 'inputFile', style: { display: 'none' } }),
            children
        );
    };

    return Upload;
}(_react.Component);

Upload.defaultProps = {
    paste: true, //是否支持粘贴
    drop: true, //是否支持拖拽
    domain: 'document', //域 document或者self 指drop或paste在什么域上
    allow: "png|jpg|jpge", //允许上传文件格式 比如:image或者image|zip
    onError: function onError(msg, type) {},
    onChange: function onChange() {}
};

Upload.filesToDataURL = _utils2["default"].filesToDataURL;
Upload.compressImage = _utils2["default"].compressImage;

exports["default"] = Upload;
module.exports = exports['default'];